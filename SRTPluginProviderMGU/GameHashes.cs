using System;
using System.IO;
using System.Linq;
using System.Security.Cryptography;

namespace SRTPluginProviderMGU
{
    public static class GameHashes
    {
        private static readonly byte[] MGU_10 = new byte[32] { 0x85, 0x98, 0xBB, 0x9F, 0xE6, 0x6B, 0x63, 0x88, 0x07, 0x44, 0x43, 0x20, 0x55, 0x9D, 0xAA, 0xC0, 0x89, 0xD3, 0xE6, 0x24, 0x0D, 0xF0, 0x1D, 0xD9, 0xB7, 0x78, 0x16, 0xC2, 0x3D, 0x6C, 0x8F, 0xF4 };
        private static readonly byte[] MGU_10_MEMFIX = new byte[32] { 0x5E, 0x6A, 0xF2, 0x17, 0xF8, 0x08, 0x11, 0x2C, 0x5B, 0x95, 0x5E, 0x40, 0xE6, 0xE3, 0x14, 0xF1, 0x5A, 0x90, 0x58, 0x7D, 0x28, 0x02, 0xF4, 0x87, 0xC2, 0xAD, 0x40, 0xB2, 0xBC, 0x81, 0xA0, 0x8A };

        private static readonly byte[] MGU_20 = new byte[32] { 0xDA, 0xA7, 0x0E, 0x8F, 0xB3, 0xBA, 0x76, 0x63, 0xC1, 0x95, 0x30, 0x0F, 0xB0, 0xAF, 0x42, 0x4F, 0x45, 0x84, 0x27, 0x68, 0x8C, 0xB8, 0x8D, 0x29, 0x62, 0x93, 0x57, 0xD4, 0x73, 0x18, 0x33, 0x0E };
        private static readonly byte[] MGU_20_MEMFIX = new byte[32] { 0x98, 0x19, 0x5D, 0x21, 0xF2, 0x47, 0xEA, 0x21, 0x26, 0x0A, 0x51, 0x24, 0xAA, 0xC7, 0x8F, 0xC9, 0x78, 0xAC, 0x58, 0x17, 0x12, 0x8D, 0x30, 0xE1, 0x6F, 0xFC, 0x26, 0xDC, 0x1A, 0x23, 0x83, 0xFE };

        private static readonly byte[] MGU_30 = new byte[32] { 0x8B, 0xD6, 0xA3, 0xC9, 0xA2, 0x2D, 0x6B, 0xBC, 0x0E, 0x5A, 0xAE, 0xEA, 0x9B, 0x80, 0xAE, 0xA8, 0xC5, 0xE1, 0x7D, 0x46, 0xAE, 0xF0, 0x93, 0x3A, 0x9C, 0x52, 0xBD, 0x3E, 0xC5, 0xA5, 0xB2, 0x7E };
        private static readonly byte[] MGU_30_MEMFIX = new byte[32] { 0xBB, 0x53, 0xB4, 0xDB, 0x8B, 0xF0, 0x4A, 0xA1, 0x92, 0x93, 0x51, 0xF9, 0x1B, 0x3F, 0x43, 0xE4, 0xCE, 0x6A, 0x6A, 0xA6, 0x8B, 0x70, 0xF4, 0x4E, 0x92, 0x24, 0x10, 0xDC, 0xF1, 0x95, 0x22, 0x45 };
        private static readonly byte[] MGU_30_MEMFIX_PATCH = new byte[32] { 0x00, 0xF6, 0x8D, 0x0E, 0x8F, 0xE7, 0x6F, 0xA0, 0x4D, 0x32, 0xE2, 0x95, 0x08, 0x4A, 0x88, 0xCB, 0x32, 0x72, 0xC9, 0xBD, 0x66, 0x2A, 0x45, 0xD6, 0x61, 0x7F, 0x17, 0x1F, 0xF4, 0xA4, 0xEF, 0x1D };
        private static readonly byte[] MGU_30_PATCH = new byte[32] { 0xFA, 0xFC, 0xC3, 0x9B, 0x9E, 0x24, 0x76, 0x01, 0x23, 0x82, 0xE7, 0x6D, 0x57, 0x5F, 0xDA, 0x4C, 0xAC, 0xBE, 0x31, 0x89, 0xD4, 0x07, 0x93, 0xE4, 0xE3, 0x9A, 0x05, 0xFB, 0x27, 0x82, 0xA8, 0x47 };

        public static GameVersion DetectVersion(string filePath)
        {
            byte[] checksum;
            using (SHA256 hashFunc = SHA256.Create())
            using (FileStream fs = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite | FileShare.Delete))
                checksum = hashFunc.ComputeHash(fs);

            if (checksum.SequenceEqual(MGU_10) || checksum.SequenceEqual(MGU_10_MEMFIX))
                return GameVersion.MGU_1_1;
            else if (checksum.SequenceEqual(MGU_20) || checksum.SequenceEqual(MGU_20_MEMFIX))
                return GameVersion.MGU_1_2;
            else if (checksum.SequenceEqual(MGU_30) ||
                     checksum.SequenceEqual(MGU_30_MEMFIX) ||
                     checksum.SequenceEqual(MGU_30_MEMFIX_PATCH) ||
                     checksum.SequenceEqual(MGU_30_PATCH))
                return GameVersion.MGU_1_3;
            else
                return GameVersion.Unknown;
        }
    }
}